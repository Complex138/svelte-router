// –†–µ–µ—Å—Ç—Ä layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

const layoutRegistry = new Map();

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * @param {string} name - –ò–º—è layout
 * @param {Component} component - Svelte –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 */
export function registerLayout(name, component) {
  layoutRegistry.set(name, component);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏
 * @param {string} name - –ò–º—è layout
 * @returns {Component|null} Layout –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–ª–∏ null
 */
export function getLayout(name) {
  const layout = layoutRegistry.get(name);
  
  if (!layout) {
    console.warn(`Layout "${name}" not found`);
    return null; // ‚úÖ –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }
  
  return layout;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ layout
 * @param {string} name - –ò–º—è layout
 * @returns {boolean}
 */
export function hasLayout(name) {
  return layoutRegistry.has(name);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ layout'—ã
 * @returns {Map} Map —Å layout'–∞–º–∏
 */
export function getAllLayouts() {
  return new Map(layoutRegistry);
}

/**
 * –û—á–∏—â–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä layout'–æ–≤
 */
export function clearLayouts() {
  layoutRegistry.clear();
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö layout'–æ–≤
 * @returns {string[]} –ú–∞—Å—Å–∏–≤ –∏–º–µ–Ω layout'–æ–≤
 */
export function getLayoutNames() {
  return Array.from(layoutRegistry.keys());
}

/**
 * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö layout'–∞—Ö
 */
export function debugLayouts() {
  console.log('üìã Registered Layouts:');
  for (const [name, component] of layoutRegistry) {
    console.log(`  - ${name}:`, component);
  }
}
