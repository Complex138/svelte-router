import { readdirSync, statSync } from 'fs';
import { join, relative, extname, resolve } from 'path';

/**
 * Vite plugin –¥–ª—è file-based routing –≤ Svelte
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–æ—É—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
export function viteSveltePages(options = {}) {
  const {
    pagesDir = 'resources/js/pages',
    extensions = ['.svelte'],
    ignore = ['_layout.svelte', '_error.svelte', '_middleware.js'],
    alias = '~pages'
  } = options;

  const genConfig = {
    pagesDir,
    extensions,
    ignore,
    alias,
    genCodeAlias: alias,
    routerPath: resolve(process.cwd(), 'temp-fix2/src/generated')
  };

  return {
    name: 'vite-svelte-pages',
    config(config) {
      if (!config.resolve) {
        config.resolve = {};
      }
      if (!config.resolve.alias) {
        config.resolve.alias = {};
      }

      const replacement = resolve(process.cwd(), genConfig.routerPath);

      if (Array.isArray(config.resolve.alias)) {
        config.resolve.alias.push({ find: genConfig.alias, replacement });
      } else {
        config.resolve.alias[genConfig.alias] = replacement;
      }
    },
    buildStart() {
      console.log('üîç Generating Svelte file-based routes...');
      writeRouterCode(genConfig);
    },
    watchChange(file) {
      if (file.includes(genConfig.pagesDir)) {
        console.log('üîÑ File changed, regenerating routes...');
        writeRouterCode(genConfig);
      }
    }
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Ä–æ—É—Ç–æ–≤
 */
function writeRouterCode(config) {
  const files = scanFiles(config.pagesDir, config.extensions, config.ignore);
  const routes = {};
  const layouts = {};
  const middleware = {};

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
  for (const file of files) {
    const routePath = fileToRoute(file, config.pagesDir);
    const importPath = `/resources/js/pages/${file}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç
    routes[routePath] = `() => import('${importPath}')`;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º layouts
    if (file.includes('_layout.svelte')) {
      const layoutPath = getLayoutPath(file, config.pagesDir);
      layouts[layoutPath] = `() => import('${importPath}')`;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º middleware
    if (file.includes('_middleware')) {
      const middlewarePath = getMiddlewarePath(file, config.pagesDir);
      middleware[middlewarePath] = `() => import('${importPath}')`;
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
  const routesCode = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è Svelte
import { createNavigation } from 'svelte-router-v5';

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
${files.map((file, index) => {
  const componentName = file.replace(/[^a-zA-Z0-9]/g, '_').replace(/\.svelte$/, '');
  return `import ${componentName} from '/resources/js/pages/${file}';`;
}).join('\n')}

// –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç—ã
const routes = {
${Object.entries(routes).map(([path, importCode]) => 
  `  '${path}': ${importCode}`
).join(',\n')}
};

// –°–æ–∑–¥–∞–µ–º layouts
const layouts = {
${Object.entries(layouts).map(([path, importCode]) => 
  `  '${path}': ${importCode}`
).join(',\n')}
};

// –°–æ–∑–¥–∞–µ–º middleware
const middleware = {
${Object.entries(middleware).map(([path, importCode]) => 
  `  '${path}': ${importCode}`
).join(',\n')}
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
export const navigation = createNavigation(routes);

export { routes, layouts, middleware };
`;

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const fs = require('fs');
  const path = require('path');
  
  if (!fs.existsSync(config.routerPath)) {
    fs.mkdirSync(config.routerPath, { recursive: true });
  }
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
  fs.writeFileSync(
    path.join(config.routerPath, 'index.js'),
    routesCode
  );
  
  console.log('‚úÖ Generated routes:', Object.keys(routes));
  console.log('‚úÖ Generated layouts:', Object.keys(layouts));
  console.log('‚úÖ Generated middleware:', Object.keys(middleware));
}

/**
 * –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
 */
function scanFiles(dir, extensions, ignore, config) {
  const files = [];
  
  try {
    const items = readdirSync(dir);
    
    for (const item of items) {
      const fullPath = join(dir, item);
      const stat = statSync(fullPath);
      
      if (stat.isDirectory()) {
        files.push(...scanFiles(fullPath, extensions, ignore, config));
      } else {
        const ext = extname(item);
        const isIgnored = ignore.some(ignorePattern => item.includes(ignorePattern));
        
        if (extensions.includes(ext) && !isIgnored) {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ pagesDir
          const pagesDir = config?.pagesDir || 'resources/js/pages';
          const relativePath = relative(join(process.cwd(), pagesDir), fullPath);
          files.push(relativePath);
        }
      }
    }
  } catch (error) {
    console.warn('Error scanning directory:', error);
  }
  
  return files;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ä–æ—É—Ç
 */
function fileToRoute(filePath, pagesDir) {
  // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ pagesDir
  let route = filePath.replace(/.*\/resources\/js\/pages\//, '');
  
  // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  route = route.replace(/\.(svelte|js|ts)$/, '');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º index —Ñ–∞–π–ª—ã
  if (route.endsWith('/index')) {
    route = route.replace('/index', '');
  }
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  route = processDynamicParams(route);
  
  return route || '/';
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 */
function processDynamicParams(route) {
  return route.replace(/\[(\w+)(?:\(([^)]+)\))?\]/g, (match, paramName, regex) => {
    if (paramName.endsWith('?')) {
      const actualParamName = paramName.slice(0, -1);
      return `:${actualParamName}(${regex || '[^/]+'})?`;
    }
    return `:${paramName}(${regex || '[^/]+'})`;
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –¥–ª—è layout
 */
function getLayoutPath(filePath, pagesDir) {
  const dirPath = filePath.substring(0, filePath.lastIndexOf('/'));
  return dirPath.replace(pagesDir + '/', '') || '/';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –¥–ª—è middleware
 */
function getMiddlewarePath(filePath, pagesDir) {
  const dirPath = filePath.substring(0, filePath.lastIndexOf('/'));
  return dirPath.replace(pagesDir + '/', '') || '/';
}
