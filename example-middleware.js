// –ü—Ä–∏–º–µ—Ä—ã middleware –¥–ª—è svelte-router-v5

import { registerMiddleware, registerGlobalMiddleware } from './src/index.js';

// ===== –ü–†–ò–ú–ï–†–´ MIDDLEWARE =====

// 1. Middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
registerMiddleware('auth', async (context) => {
  console.log('üîê Auth middleware:', context.to);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ localStorage
  const token = localStorage.getItem('auth_token');
  
  if (!token) {
    console.log('‚ùå No auth token, redirecting to login');
    context.navigate('/login');
    return false; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
  }
  
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  try {
    const response = await fetch('/api/verify-token', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (!response.ok) {
      localStorage.removeItem('auth_token');
      context.navigate('/login');
      return false;
    }
  } catch (error) {
    console.error('Token verification failed:', error);
    localStorage.removeItem('auth_token');
    context.navigate('/login');
    return false;
  }
  
  console.log('‚úÖ Auth middleware passed');
  return true; // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥
});

// 2. Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
registerMiddleware('admin', async (context) => {
  console.log('üëë Admin middleware:', context.to);
  
  const userRole = localStorage.getItem('user_role');
  
  if (userRole !== 'admin') {
    console.log('‚ùå Not admin, redirecting to 403');
    context.navigate('/403');
    return false;
  }
  
  console.log('‚úÖ Admin middleware passed');
  return true;
});

// 3. Middleware —Å –æ–ø—Ü–∏—è–º–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π)
registerMiddleware('permissions', async (context) => {
  console.log('üîë Permissions middleware:', context.to, context.middlewareOptions);
  
  const requiredPermissions = context.middlewareOptions?.required || [];
  const userPermissions = JSON.parse(localStorage.getItem('user_permissions') || '[]');
  
  const hasAllPermissions = requiredPermissions.every(permission => 
    userPermissions.includes(permission)
  );
  
  if (!hasAllPermissions) {
    console.log('‚ùå Missing permissions:', requiredPermissions);
    context.navigate('/403');
    return false;
  }
  
  console.log('‚úÖ Permissions middleware passed');
  return true;
});

// 4. Middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
registerMiddleware('logger', async (context) => {
  console.log('üìù Logger middleware:', {
    from: context.from,
    to: context.to,
    params: context.params,
    query: context.query,
    timestamp: new Date().toISOString()
  });
  
  // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
  if (window.gtag) {
    window.gtag('event', 'page_view', {
      page_title: context.to,
      page_location: window.location.href
    });
  }
  
  return true; // –í—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º
});

// 5. Middleware —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
registerMiddleware('redirect', async (context) => {
  console.log('üîÑ Redirect middleware:', context.to);
  
  // –ü—Ä–∏–º–µ—Ä: —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å–æ —Å—Ç–∞—Ä–æ–≥–æ URL –Ω–∞ –Ω–æ–≤—ã–π
  const redirects = {
    '/old-page': '/new-page',
    '/legacy': '/modern'
  };
  
  if (redirects[context.to]) {
    console.log(`üîÑ Redirecting ${context.to} to ${redirects[context.to]}`);
    context.navigate(redirects[context.to]);
    return false; // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
  }
  
  return true;
});

// 6. Middleware –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
registerMiddleware('loadData', async (context) => {
  console.log('üìä Load data middleware:', context.to);
  
  // –ü—Ä–∏–º–µ—Ä: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
  if (context.to.startsWith('/user/') && context.params.id) {
    try {
      const response = await fetch(`/api/users/${context.params.id}`);
      if (response.ok) {
        const userData = await response.json();
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        context.props.userData = userData;
        console.log('‚úÖ User data loaded:', userData);
      }
    } catch (error) {
      console.error('Failed to load user data:', error);
      // –ú–æ–∂–Ω–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ 404 –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
    }
  }
  
  return true;
});

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï MIDDLEWARE =====

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
registerGlobalMiddleware('before', async (context) => {
  console.log('üåç Global before middleware:', {
    from: context.from,
    to: context.to,
    timestamp: new Date().toISOString()
  });
  return true;
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
registerGlobalMiddleware('after', async (context) => {
  console.log('üìà Global after middleware - tracking page view:', context.to);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
  if (window.gtag) {
    window.gtag('config', 'GA_MEASUREMENT_ID', {
      page_path: context.to
    });
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
registerGlobalMiddleware('error', async (error, context) => {
  console.error('üö® Global error middleware:', {
    error: error.message,
    from: context.from,
    to: context.to,
    timestamp: new Date().toISOString()
  });
  
  // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  if (window.Sentry) {
    window.Sentry.captureException(error, {
      tags: {
        component: 'router',
        from: context.from,
        to: context.to
      }
    });
  }
});

// ===== –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø =====

console.log('‚úÖ Middleware examples loaded!');
console.log('Available middleware: auth, admin, permissions, logger, redirect, loadData');
console.log('Global middleware: before, after, error');
